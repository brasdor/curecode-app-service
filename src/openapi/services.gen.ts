// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
  formDataBodySerializer,
} from "@hey-api/client-axios"
import type {
  CreateCompletionData,
  CreateCompletionError,
  CreateCompletionResponse,
  GetCompletionData,
  GetCompletionError,
  GetCompletionResponse,
  CreateSummaryData,
  CreateSummaryError,
  CreateSummaryResponse,
  GetSummaryData,
  GetSummaryError,
  GetSummaryResponse,
  CreateTranscriptionData,
  CreateTranscriptionError,
  CreateTranscriptionResponse,
  GetTranscriptionData,
  GetTranscriptionError,
  GetTranscriptionResponse,
} from "./types.gen"

export const client = createClient(createConfig())

export const createCompletion = <ThrowOnError extends boolean = false>(
  options: Options<CreateCompletionData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateCompletionResponse,
    CreateCompletionError,
    ThrowOnError
  >({
    ...options,
    url: "/completions",
  })
}

export const getCompletion = <ThrowOnError extends boolean = false>(
  options: Options<GetCompletionData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetCompletionResponse,
    GetCompletionError,
    ThrowOnError
  >({
    ...options,
    url: "/completions/{id}",
  })
}

export const createSummary = <ThrowOnError extends boolean = false>(
  options: Options<CreateSummaryData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateSummaryResponse,
    CreateSummaryError,
    ThrowOnError
  >({
    ...options,
    url: "/summaries",
  })
}

export const getSummary = <ThrowOnError extends boolean = false>(
  options: Options<GetSummaryData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetSummaryResponse,
    GetSummaryError,
    ThrowOnError
  >({
    ...options,
    url: "/summaries/{id}",
  })
}

export const createTranscription = <ThrowOnError extends boolean = false>(
  options: Options<CreateTranscriptionData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateTranscriptionResponse,
    CreateTranscriptionError,
    ThrowOnError
  >({
    ...options,
    ...formDataBodySerializer,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
    url: "/transcriptions",
  })
}

export const getTranscription = <ThrowOnError extends boolean = false>(
  options: Options<GetTranscriptionData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetTranscriptionResponse,
    GetTranscriptionError,
    ThrowOnError
  >({
    ...options,
    url: "/transcriptions/{id}",
  })
}
