// This file is auto-generated by @hey-api/openapi-ts

export const CreateCompletionSchema = {
  type: "object",
  required: ["user", "tenant", "document", "prompt"],
  properties: {
    user: {
      type: "object",
      required: ["id"],
      nullable: false,
      properties: {
        id: {
          type: "string",
          nullable: false,
        },
      },
    },
    tenant: {
      type: "object",
      required: ["id"],
      nullable: false,
      properties: {
        id: {
          type: "string",
          nullable: false,
        },
      },
    },
    document: {
      oneOf: [
        {
          $ref: "#/components/schemas/CreateCompletionReferralLetterDocument",
        },
        {
          $ref: "#/components/schemas/CreateCompletionProgressReportDocument",
        },
        {
          $ref: "#/components/schemas/CreateCompletionNurseLogEntryDocument",
        },
      ],
    },
    prompt: {
      oneOf: [
        {
          $ref: "#/components/schemas/CreateCompletionDocumentPrompt",
        },
        {
          $ref: "#/components/schemas/CreateCompletionParagraphPrompt",
        },
        {
          $ref: "#/components/schemas/CreateCompletionInlinePrompt",
        },
        {
          $ref: "#/components/schemas/CreateCompletionCommentPrompt",
        },
      ],
    },
  },
} as const

export const CreateCompletionDocumentSchema = {
  type: "object",
  required: ["id"],
  properties: {
    id: {
      type: "string",
      nullable: false,
    },
  },
} as const

export const CreateCompletionProgressReportDocumentSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/CreateCompletionDocument",
    },
    {
      type: "object",
      required: ["id", "type"],
      properties: {
        id: {
          type: "string",
          nullable: false,
        },
        type: {
          enum: ["progressReport"],
        },
        sectionType: {
          $ref: "#/components/schemas/ProgressReportSectionType",
        },
      },
    },
  ],
} as const

export const CreateCompletionReferralLetterDocumentSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/CreateCompletionDocument",
    },
    {
      type: "object",
      required: ["id", "type"],
      properties: {
        id: {
          type: "string",
          nullable: false,
        },
        type: {
          enum: ["referralLetter"],
        },
        sectionType: {
          $ref: "#/components/schemas/ReferralLetterSectionType",
        },
      },
    },
  ],
} as const

export const CreateCompletionNurseLogEntryDocumentSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/CreateCompletionDocument",
    },
    {
      type: "object",
      required: ["id", "type"],
      properties: {
        id: {
          type: "string",
          nullable: false,
        },
        type: {
          enum: ["nurseLogEntry"],
        },
      },
    },
  ],
} as const

export const CreateCompletionPromptSchema = {
  type: "object",
  properties: {
    language: {
      $ref: "#/components/schemas/Language",
    },
  },
} as const

export const CreateCompletionDocumentPromptSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/CreateCompletionPrompt",
    },
    {
      type: "object",
      required: ["type", "content"],
      properties: {
        type: {
          enum: ["document"],
        },
        content: {
          type: "string",
          nullable: false,
        },
      },
    },
  ],
} as const

export const CreateCompletionParagraphPromptSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/CreateCompletionPrompt",
    },
    {
      type: "object",
      required: ["type", "content"],
      properties: {
        type: {
          enum: ["paragraph"],
        },
        content: {
          type: "string",
          nullable: false,
        },
      },
    },
  ],
} as const

export const CreateCompletionInlinePromptSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/CreateCompletionPrompt",
    },
    {
      type: "object",
      required: ["type", "content", "caretPosition"],
      properties: {
        type: {
          enum: ["inline"],
        },
        content: {
          type: "string",
          nullable: false,
        },
        caretPosition: {
          type: "integer",
          nullable: false,
        },
      },
    },
  ],
} as const

export const CreateCompletionCommentPromptSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/CreateCompletionPrompt",
    },
    {
      type: "object",
      required: [
        "type",
        "draftContent",
        "commentContent",
        "highlightStartPosition",
        "highlightEndPosition",
      ],
      properties: {
        type: {
          enum: ["comment"],
        },
        draftContent: {
          type: "string",
          nullable: false,
        },
        commentContent: {
          type: "string",
          nullable: false,
        },
        highlightStartPosition: {
          type: "integer",
          nullable: false,
        },
        highlightEndPosition: {
          type: "integer",
          nullable: false,
        },
      },
    },
  ],
} as const

export const CompletionSchema = {
  type: "object",
  required: [
    "id",
    "createdAt",
    "updatedAt",
    "completedAt",
    "user",
    "tenant",
    "document",
    "prompt",
    "completion",
  ],
  properties: {
    id: {
      type: "string",
      nullable: false,
    },
    createdAt: {
      type: "string",
      format: "date-time",
      nullable: false,
    },
    updatedAt: {
      type: "string",
      format: "date-time",
      nullable: false,
    },
    completedAt: {
      type: "string",
      format: "date-time",
      nullable: true,
    },
    user: {
      type: "object",
      nullable: false,
      required: ["id"],
      properties: {
        id: {
          type: "string",
          nullable: false,
        },
      },
    },
    tenant: {
      type: "object",
      nullable: false,
      required: ["id"],
      properties: {
        id: {
          type: "string",
          nullable: false,
        },
      },
    },
    document: {
      type: "object",
      nullable: false,
      required: ["id"],
      properties: {
        id: {
          type: "string",
          nullable: false,
        },
      },
    },
    prompt: {
      type: "object",
      nullable: false,
      required: ["tokens"],
      properties: {
        tokens: {
          type: "integer",
          nullable: false,
        },
      },
    },
    completion: {
      type: "object",
      nullable: false,
      required: ["content", "tokens"],
      properties: {
        content: {
          type: "string",
          nullable: false,
        },
        tokens: {
          type: "integer",
          nullable: false,
        },
      },
    },
  },
} as const

export const CreateSummarySchema = {
  type: "object",
  required: ["user", "tenant", "prompt"],
  properties: {
    user: {
      type: "object",
      required: ["id"],
      nullable: false,
      properties: {
        id: {
          type: "string",
          nullable: false,
        },
      },
    },
    tenant: {
      type: "object",
      required: ["id"],
      nullable: false,
      properties: {
        id: {
          type: "string",
          nullable: false,
        },
      },
    },
    prompt: {
      oneOf: [
        {
          $ref: "#/components/schemas/CreateSummarySimplePrompt",
        },
      ],
    },
  },
} as const

export const CreatSummaryPromptSchema = {
  type: "object",
  properties: {
    language: {
      $ref: "#/components/schemas/Language",
    },
  },
} as const

export const CreateSummarySimplePromptSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/CreatSummaryPrompt",
    },
    {
      type: "object",
      required: ["type", "content"],
      properties: {
        type: {
          enum: ["simple"],
        },
        content: {
          type: "string",
          nullable: false,
        },
      },
    },
  ],
} as const

export const SummarySchema = {
  type: "object",
  required: [
    "id",
    "createdAt",
    "updatedAt",
    "completedAt",
    "user",
    "tenant",
    "prompt",
    "summary",
  ],
  properties: {
    id: {
      type: "string",
      nullable: false,
    },
    createdAt: {
      type: "string",
      format: "date-time",
      nullable: false,
    },
    updatedAt: {
      type: "string",
      format: "date-time",
      nullable: false,
    },
    completedAt: {
      type: "string",
      format: "date-time",
      nullable: true,
    },
    user: {
      type: "object",
      nullable: false,
      required: ["id"],
      properties: {
        id: {
          type: "string",
          nullable: false,
        },
      },
    },
    tenant: {
      type: "object",
      nullable: false,
      required: ["id"],
      properties: {
        id: {
          type: "string",
          nullable: false,
        },
      },
    },
    prompt: {
      type: "object",
      nullable: false,
      required: ["tokens"],
      properties: {
        tokens: {
          type: "integer",
          nullable: false,
        },
      },
    },
    summary: {
      type: "object",
      nullable: false,
      required: ["content", "tokens"],
      properties: {
        content: {
          type: "string",
          nullable: false,
        },
        tokens: {
          type: "integer",
          nullable: false,
        },
      },
    },
  },
} as const

export const TranscriptionSchema = {
  type: "object",
  required: [
    "id",
    "createdAt",
    "updatedAt",
    "completedAt",
    "user",
    "tenant",
    "transcription",
  ],
  properties: {
    id: {
      type: "string",
      nullable: false,
    },
    createdAt: {
      type: "string",
      format: "date-time",
      nullable: false,
    },
    updatedAt: {
      type: "string",
      format: "date-time",
      nullable: false,
    },
    completedAt: {
      type: "string",
      format: "date-time",
      nullable: true,
    },
    user: {
      type: "object",
      nullable: false,
      required: ["id"],
      properties: {
        id: {
          type: "string",
          nullable: false,
        },
      },
    },
    tenant: {
      type: "object",
      nullable: false,
      required: ["id"],
      properties: {
        id: {
          type: "string",
          nullable: false,
        },
      },
    },
    transcription: {
      type: "object",
      nullable: false,
      required: ["content"],
      properties: {
        content: {
          type: "string",
          nullable: false,
        },
      },
    },
  },
} as const

export const PromptTemplateSchema = {
  type: "object",
  required: ["name", "version", "parameters"],
  properties: {
    name: {
      $ref: "#/components/schemas/PromptName",
    },
    version: {
      type: "string",
      nullable: false,
    },
    parameters: {
      type: "array",
      items: {
        type: "string",
      },
    },
  },
} as const

export const PromptNameSchema = {
  enum: ["general"],
} as const

export const ProblemDetailsSchema = {
  type: "object",
  required: ["status", "title", "detail"],
  additionalProperties: true,
  properties: {
    status: {
      type: "integer",
      nullable: false,
    },
    title: {
      type: "string",
      nullable: false,
    },
    detail: {
      type: "string",
      nullable: false,
    },
  },
} as const

export const CompletionStateSchema = {
  enum: ["created", "processing", "completed"],
} as const

export const DocumentTypeSchema = {
  enum: ["progressReport", "referralLetter", "nurseLogEntry"],
} as const

export const ProgressReportSectionTypeSchema = {
  enum: [
    "contactReason",
    "anamnesis",
    "currentCondition",
    "progress",
    "diagnosis",
    "treatment",
    "plan",
    "prognosis",
  ],
} as const

export const ReferralLetterSectionTypeSchema = {
  enum: [
    "contactReason",
    "anamnesis",
    "currentCondition",
    "progress",
    "diagnosis",
    "treatment",
    "plan",
    "prognosis",
  ],
} as const

export const LanguageSchema = {
  enum: ["de", "fr", "it", "en"],
} as const
